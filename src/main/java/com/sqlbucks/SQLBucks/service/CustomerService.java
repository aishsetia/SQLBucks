package com.sqlbucks.SQLBucks.service;

import com.sqlbucks.SQLBucks.domain.Customer;
import com.sqlbucks.SQLBucks.domain.CustomerBalance;
import com.sqlbucks.SQLBucks.domain.User;
import com.sqlbucks.SQLBucks.repository.CustomerRepository;
import com.sqlbucks.SQLBucks.repository.CustomerBalanceRepository;
import com.sqlbucks.SQLBucks.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Service
public class CustomerService {

    @Autowired
    private CustomerRepository customerRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private CustomerBalanceRepository customerBalanceRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    public Optional<Customer> getCustomerById(Integer id) {
        return customerRepository.findById(id);
    }

    @Transactional
    public Customer registerCustomer(Customer customer, String password) {
        // Save the customer to get the generated ID
        customer.setCustId(null); // Ensure ID is generated by the database
        Customer newCustomer = customerRepository.save(customer);

        // Create and save the user
        User user = new User();
        // This is a simplistic way to generate a userid. We can improve this later.
        String userId = newCustomer.getCustId() + "." + newCustomer.getName().charAt(0);
        user.setUserid(userId);
        user.setPwdHash(passwordEncoder.encode(password));
        user.setCustomer(newCustomer);
        user.setAdmin(false);
        userRepository.save(user);

        // Create and save the customer balance
        CustomerBalance customerBalance = new CustomerBalance();
        customerBalance.setCustId(newCustomer.getCustId());
        customerBalance.setCustomer(newCustomer);
        customerBalance.setBalance(0.0);
        customerBalanceRepository.save(customerBalance);

        return newCustomer;
    }
} 